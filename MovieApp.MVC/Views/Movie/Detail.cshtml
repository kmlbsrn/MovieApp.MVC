@model Tuple<MovieDetailModel, List<ReviewListModel>, CreditsListViewModel,VideoListViewModel>

<div class="container mx-auto py-8">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        <div class="col-span-3">
            <div class="flex flex-col md:flex-row  shadow-md rounded-lg overflow-hidden relative">
                <!-- Background Image - Movie Backdrop -->
                <img src="https://image.tmdb.org/t/p/original/@Model.Item1.BackdropPath"
                     alt="@Model.Item1.Title"
                     class="absolute inset-0 w-full h-full object-cover"
                     style="z-index: -1; opacity:0.7;">
                <!-- Left Column - Movie Poster -->
                <div class="md:w-1/3 p-4">
                    <img src="https://image.tmdb.org/t/p/w500/@Model.Item1.PosterPath"
                         alt="@Model.Item1.Title"
                         class="w-full rounded-lg shadow-md"
                         style="max-width: 596.89px; max-height: 895.33px;">


                </div>
                <!-- Right Column - Movie Details -->
                <div class="md:w-2/3 p-4 rounded-lg shadow-lg" style="background-color: rgba(0, 0, 0, 0.5);">
                    <h2 class="text-3xl font-semibold mb-4 text-white">@Model.Item1.Title</h2>
                    <p class="text-gray-300 mb-4 text-white">Release Date: @Model.Item1.ReleaseDate</p>
                    <p class="text-gray-300 mb-4 text-white">Genres: @string.Join(", ", Model.Item1.Genres.Select(g => g.Name))</p>
                    <p class="text-gray-300 mb-4 text-white">@Model.Item1.Overview</p>
                    <!-- Additional Movie Details -->
                    <p class="text-gray-300 mb-4 text-white">Budget: $@Model.Item1.Budget</p>
                    <p class="text-gray-300 mb-4 text-white">Revenue: $@Model.Item1.Revenue</p>
                    <p class="text-gray-300 mb-4 text-white">Runtime: @Model.Item1.Runtime minutes</p>

                    @if (Model.Item4.Results.FirstOrDefault(x => x.Type == VideoType.Trailer.ToString()) is not null)
                    {
                        <div id="player"></div>
                    }
                    else
                    {
                        <p class="text-white">Trailer not available.</p>
                    }

                </div>


            </div>

            <!-- Cast List -->
            <div class="mt-8 overflow-x-auto">
                <h3 class="text-2xl font-semibold mb-4">Cast</h3>
                <div class="flex flex-nowrap space-x-4 pb-4">
                    @foreach (var castMember in Model.Item3.Cast.Take(10))
                    {
                        <a asp-controller="Credits" asp-action="Detail" asp-route-id="@castMember.Id" class="flex-shrink-0 bg-white shadow-md rounded-lg overflow-hidden" style="width: 200px;">
                            @if (!string.IsNullOrEmpty(castMember.ProfilePath))
                            {
                                <img src="https://image.tmdb.org/t/p/w500/@castMember.ProfilePath"
                                     alt="@castMember.Name"
                                     class="w-full h-64 object-cover cursor-pointer"
                                     style="aspect-ratio: 2/3;">
                            }
                            else
                            {
                                <img src="~/image/no-avatar.jpg"
                                     alt="@castMember.Name"
                                     class="w-full h-64 object-cover cursor-pointer"
                                     style="aspect-ratio: 2/3;">
                            }

                            <div class="p-4">
                                <h4 class="text-lg font-semibold mb-2">@castMember.Name</h4>
                                <p class="text-gray-700">@castMember.Character</p>
                            </div>
                        </a>
                    }
                </div>

            </div>






            <partial name="_ReviewPartial" model="new AddReviewModel(Model.Item1.Id)" />

            <!-- Review List -->
            <div class="mt-8">
                <h3 class="text-2xl font-semibold mb-4">Reviews</h3>
                @foreach (var review in Model.Item2)
                {
                    <div class="bg-white shadow-md rounded-lg p-4 mb-4">
                        @for (int i = 0; i < 5; i++)
                        {
                            if (i < review.Rating)
                            {
                                <i class="fas fa-star text-yellow-500"></i>
                            }
                            else
                            {
                                <i class="far fa-star text-yellow-500"></i>
                            }
                        }
                        <span class="ml-2 text-lg font-semibold">@review.Rating</span>
                        <p class="text-gray-700 mb-2">User: <a asp-controller="Profile" asp-action="OtherProfile" asp-route-userId="@review.UserId">@review.UserName</a></p>
                        <p class="text-gray-700 mb-2">@review.ReviewText</p>
                    </div>
                }
            </div>




        </div>
    </div>
</div>
@section Scripts {
    @if (Model.Item4.Results.FirstOrDefault(x => x.Type == VideoType.Trailer.ToString()) is not null)
    {
        <script>
            $(document).ready(function () {
                const stars = $('.fa-star-rating');

                stars.each(function (index, star) {
                    $(star).on('click', function () {
                        const rating = $(star).attr("data-value");
                        $('#rating').val(rating);
                        $('#ratingText').text(rating * 2);
                        stars.each(function (i, s) {
                            if ($(s).attr("data-value") <= rating) {
                                $(s).addClass('text-yellow-500');
                            } else {
                                $(s).removeClass('text-yellow-500');
                            }
                        });
                    });
                });
            });

            console.log("@(Model.Item4.Results.Any() ? "true" : "false")")
            // YouTube API'nin yüklenmesini bekleyin
            function onYouTubeIframeAPIReady() {
                // YouTube oynatıcıyı oluşturun
                var player = new YT.Player('player', {
                    height: '360',
                    width: '640',
                    videoId: '@Model.Item4.Results.FirstOrDefault(x => x.Type == VideoType.Trailer.ToString()).Key', // Burada "VIDEO_ID" kısmını göstermek istediğiniz YouTube videosunun gerçek ID'si ile değiştirin
                    playerVars:
                    {
                        'autoplay': 0, // Otomatik oynatma kapalı (1: Açık, 0: Kapalı)
                        'controls': 1, // Oynatıcı kontrollerini göster (1: Göster, 0: Gizle)
                        'showinfo': 0, // Video bilgisi göster (1: Göster, 0: Gizle)
                        'rel': 0, // İlgili videoları gösterme (1: Göster, 0: Gizle)
                        'modestbranding': 1 // YouTube logosunu gösterme (1: Gösterme, 0: Göster)
                    },
                    events:
                    {
                        'onReady': onPlayerReady, // Oynatıcı hazır olduğunda çağrılacak fonksiyon
                        'onStateChange': onPlayerStateChange // Oynatıcı durumu değiştikçe çağrılacak fonksiyon
                    }
                });
            }

            // Oynatıcı hazır olduğunda yapılacak işlemler
            function onPlayerReady(event) {
                // Oynatıcı hazır olduğunda burada işlemler yapılabilir
            }

            // Oynatıcı durumu değiştikçe yapılacak işlemler
            function onPlayerStateChange(event) {
                // Oynatıcı durumu değiştikçe burada işlemler yapılabilir
            }
        </script>
    }
}
